you got an rts 2d game. you need to place buildings. 
develop economy. 
destroy enemy squads and buildings. 
winning is the destruction of enemy HQ. 
losing is the destruction of yours.

--------- your utils:
export type RectOrth = {
    top: number;
    right: number;
    bottom: number;
    left: number;
};
export type Point = {
    x: number;
    y: number;
};
export type Line = {
    p1: Point;
    p2: Point;
};
export type Rect = {
    p1: Point;
    p2: Point;
    p3: Point;
    p4: Point;
};
export type Polygon = Point[];
export declare function orthogonalRect(p1: Point, p3: Point): Rect;
export declare function randomPointInRect({ p1, p2, p3 }: Rect): Point;
export declare function sortRectPoints(rect: Rect): Rect;
export declare function isPointInRect(point: Point, { p1, p2, p3, p4 }: Rect): boolean;
export declare function rotatePoint({ x: px, y: py }: Point, { x: cx, y: cy }: Point, rad: number): {
    x: number;
    y: number;
};
export declare function getIntersectionFirstPolygon(line: {
    p1: Point;
    p2: Point;
}, polygon: Polygon): Point | null;
export declare function rotateRect({ rect, anchor, angle, }: {
    rect: Rect;
    anchor: Point;
    angle: number;
}): {
    p1: {
        x: number;
        y: number;
    };
    p2: {
        x: number;
        y: number;
    };
    p3: {
        x: number;
        y: number;
    };
    p4: {
        x: number;
        y: number;
    };
};
export declare function makeRectOrthogonal(rect: Rect): {
    p1: {
        x: number;
        y: number;
    };
    p2: {
        x: number;
        y: number;
    };
    p3: {
        x: number;
        y: number;
    };
    p4: {
        x: number;
        y: number;
    };
};
export declare function getRectCenter(rect: Rect): Point;
export declare function getIntersectionFirstRect(line: {
    p1: Point;
    p2: Point;
}, rect: Rect): Point | null;
export declare function getIntersectionAnyPolygon(line: {
    p1: Point;
    p2: Point;
}, polygon: Polygon): Point | null;
export declare function getIntersectionAnyRect(line: {
    p1: Point;
    p2: Point;
}, rect: Rect): Point | null;
export declare function roundSinCos(sincos: number): number;
export declare function roundAngle(angleRaw: number): number;
export declare enum Direction {
    top = 0,
    right = 1,
    bottom = 2,
    left = 3
}
export declare function getIntersectedSquareOrth(point: Point, angleRaw: number, cosAngle: number, sinAngle: number, square: RectOrth): {
    side: Direction.top | Direction.right | Direction.bottom | Direction.left;
    intersection: Point;
};
export declare function distanceBetween(p1: Point, p2: Point): number;
export declare function arePointsEqual(p1: Point, p2: Point): boolean;
export declare function randomPointInPolygon(polygon: Polygon): Point;
export declare function isPointInPolygon(point: Point, polygon: Polygon): boolean;
export declare function assertUnreachable(x: never): never;


--------- your class to implement:
export class PlayerAI extends Player {
    constructor(
        readonly game: Game,
        readonly team: Team,
    ) {
        super(game, team);
    }
}



--------- Game class:
export declare enum GameEventTickName {
    squadsRemoved = "squads-removed",
    dotsAdded = "dots-added",
    dotsRemoved = "dots-removed",
    dotsMoved = "dots-moved",
    resourcesChanged = "resources-changed"
}
export type GameEventTick = {
    name: GameEventTickName.squadsRemoved;
    payload: {
        squads: Squad[];
    };
} | {
    name: GameEventTickName.dotsAdded;
    payload: {
        dots: Dot[];
    };
} | {
    name: GameEventTickName.dotsRemoved;
    payload: {
        dots: Dot[];
    };
} | {
    name: GameEventTickName.dotsMoved;
    payload: {
        dots: Dot[];
    };
} | {
    name: GameEventTickName.resourcesChanged;
    payload: null;
};
export type GameEventFromName<Name extends GameEventTick["name"]> = Extract<GameEventTick, {
    name: Name;
}>;
export type GameEventListener<Name extends GameEventTick["name"]> = (payload: GameEventFromName<Name>["payload"]) => void;
export declare class Game {
    readonly width: number;
    readonly height: number;
    private dotsController;
    private projectilesController;
    private squadsController;
    private buildingsController;
    private resourcesController;
    private teamController;
    private eventListeners;
    constructor(width: number, height: number);
    getPrivateStaffYouShouldNotUse(): {
        dotsController: DotsController;
        projectilesController: ProjectilesController;
        squadsController: SquadsController;
        buildingsController: BuildingsController;
        resourcesController: ResourcesController;
        teamController: TeamController;
    };
    getDots(): Set<Dot>;
    getSquads(): Squad[];
    getBuildings(): Set<Building>;
    getTeamToResources(): Map<Team, import("./ResourcesController").ResourcesState>;
    private emitEvent;
    addEventListener<Name extends GameEventTick["name"]>(name: Name, listener: GameEventListener<Name>): void;
    removeEventListener<Name extends GameEventTick["name"]>(name: Name, listener: GameEventListener<Name>): void;
    orderAttackOnlySquad({ squadAttacker, squadTarget, }: {
        squadAttacker: Squad;
        squadTarget: Squad;
    }): void;
    orderAttackOnlyBuilding({ squadAttacker, buildingTarget, }: {
        squadAttacker: Squad;
        buildingTarget: Building;
    }): void;
    cancelAttackSquadAll(squadAttacker: Squad): void;
    dotWithoutSquadMoveTo(dot: Dot, destination: Point): void;
    tryBuild(building: Building): boolean;
    createSquad(dots: Dot[], team: Team, center: Point): {
        readonly isSuccess: false;
        readonly error: "no enough dots";
        readonly squad?: undefined;
    } | {
        readonly isSuccess: true;
        readonly squad: Squad;
        readonly error?: undefined;
    };
    removeSquad(squad: Squad): void;
    isInSquad(dot: Dot): boolean;
    moveSquadTo(squads: Squad[], targetFrame: Rect): Rect[];
}


--------- SquadsController class:
export type Squad = {
    key: string;
    index: number;
    slots: Slot[];
    attackTargetBuildings: Set<Building>;
    attackTargetSquads: Set<Squad>;
    attackTargetedBySquads: Set<Squad>;
    allowAttack: boolean;
    allowShootOnce: boolean;
    dotsToShootOnce: Set<Dot>;
    team: Team;
    removed: boolean;
};
export type Slot = {
    position: Point;
    angle: number;
    dot: Dot | null;
};
export type SquadsControllerTickEffects = {
    squadsRemoved: Squad[];
};

--------- ResourcesController class:
export type ResourcesState = {
    food: number;
    foodCapacity: number;
    housing: number;
    wood: number;
    woodCapacity: number;
    coins: number;
};
export declare class ResourcesController {
    teamToState: Map<Team, ResourcesState>;
    getState(team: Team): ResourcesState;
}


--------- ProjectilesController class:
export type Projectile = {
    position: Point;
    angle: number;
    speed: number;
    damage: number;
    flyDistanceLeft: number;
    fromDot: Dot;
    radius: number;
};

--------- DotsController class:
export type DotTemplate = {
    width: number;
    height: number;
    speed: number;
    attackRange: number;
    attackCooldown: number;
    aimingDuration: number;
    hitBox: Rect;
    health: number;
    angle: number;
};
export type Dot = DotTemplate & {
    position: Point;
    team: Team;
    removed: boolean;
    squad: Squad | null;
    slot: Slot | null;
    gridSquareIndexes: number[];
    attackCooldownLeft: number;
    aimingTimeLeft: number;
    aimingTargetDot: Dot | null;
    attackTargetedByDots: Set<Dot>;
    attackTargetDot: Dot | null;
    attackTargetBuilding: Building | null;
    path: Point[];
    allowAttack: boolean;
};
export type ProjectileToShoot = {
    fromDot: Dot;
    toPoint: Point;
    params: Pick<Projectile, "speed" | "damage" | "flyDistanceLeft" | "radius">;
};



--------- BuildingsController class:
export type BuildingCost = {
    coins: number;
    wood: number;
};
export type BuildingBase = {
    kind: string;
    frameRelative: Polygon;
    frame: Polygon;
    center: Point;
    health: number;
    team: Team;
    cost: BuildingCost;
};
export type BuildingBarracks = BuildingBase & {
    kind: "barracks";
    spawnDuration: number;
    spawnTimeLeft: number;
    spawnQueue: DotTemplate[];
    isSpawning: boolean;
};
export type BuildingHouse = BuildingBase & {
    kind: "house";
    capacity: number;
};
export type BuildingFarm = BuildingBase & {
    kind: "farm";
    foodPerSecond: number;
    foodCapacity: number;
};
export type BuildingGranary = BuildingBase & {
    kind: "granary";
    foodCapacity: number;
};
export type BuildingLumberMill = BuildingBase & {
    kind: "lumberMill";
    woodPerSecond: number;
    woodCapacity: number;
};
export type BuildingHQ = BuildingBase & {
    kind: "hq";
    coinsPerSecond: number;
};
export type Building = BuildingBarracks | BuildingHouse | BuildingFarm | BuildingGranary | BuildingLumberMill | BuildingHQ;
export type BuildingKind = Building["kind"];
export type DotSpawned = DotTemplate & Pick<Dot, "position" | "team">;
export type BuildingsControllerTickEffects = {
    dotsSpawned: DotSpawned[];
    resourcesChangeByMap: Map<Team, {
        foodProduced: number;
        foodConsumed: number;
        woodProduced: number;
        woodConsumed: number;
        coinsProduced: number;
        coinsConsumed: number;
    }>;
};
export type BuildingsControllerArgs = {
    teamToResources: Map<Team, {
        food: number;
        housing: number;
        wood: number;
        coins: number;
    }>;
};


--------- buildingsConfigs:
export type BuildingConfig<B extends Building> = Omit<
    B,
    "frame" | "center" | "team"
>;

export const BUILDINGS_CONFIGS: {
    [Kind in BuildingKind]: BuildingConfig<Extract<Building, { kind: Kind }>>;
} = {
    barracks: {
        kind: "barracks",
        frameRelative: [
            { x: -50, y: -40 },
            { x: 50, y: -40 },
            { x: 50, y: 40 },
            { x: -50, y: 40 },
        ],
        health: 10,
        spawnDuration: 500,
        spawnTimeLeft: 500,
        spawnQueue: [],
        isSpawning: false,
        cost: {
            wood: 50,
            coins: 100,
        },
    },
    house: {
        kind: "house",
        frameRelative: [
            { x: -25, y: -25 },
            { x: 25, y: -25 },
            { x: 25, y: 25 },
            { x: -25, y: 25 },
        ],
        health: 100,
        capacity: 110,
        cost: {
            wood: 20,
            coins: 20,
        },
    },
    farm: {
        kind: "farm",
        frameRelative: [
            { x: -50, y: -50 },
            { x: 50, y: -50 },
            { x: 50, y: 50 },
            { x: -50, y: 50 },
        ],
        health: 100,
        foodPerSecond: 20,
        foodCapacity: 100,
        cost: {
            wood: 80,
            coins: 50,
        },
    },
    granary: {
        kind: "granary",
        frameRelative: [
            { x: -30, y: -30 },
            { x: 30, y: -30 },
            { x: 30, y: 30 },
            { x: -30, y: 30 },
        ],
        health: 100,
        foodCapacity: 100,
        cost: {
            wood: 80,
            coins: 50,
        },
    },
    lumberMill: {
        kind: "lumberMill",
        frameRelative: [
            { x: -50, y: -50 },
            { x: 50, y: -50 },
            { x: 50, y: 50 },
            { x: -50, y: 50 },
        ],
        health: 100,
        woodPerSecond: 5,
        woodCapacity: 100,
        cost: {
            wood: 0,
            coins: 200,
        },
    },
    hq: {
        kind: "hq",
        frameRelative: [
            { x: -40, y: -50 },
            { x: 40, y: -50 },
            { x: 40, y: 50 },
            { x: -40, y: 50 },
        ],
        health: 500,
        coinsPerSecond: 10,
        cost: {
            wood: Infinity,
            coins: Infinity,
        },
    },
};


--------- SquadFrameUtils class:
export declare class SquadFrameUtils {
    static calcDotsSquadArea(dotsCount: number): number;
    static createSquadSquare(dotsCount: number, center: Point): import("../utils").Rect;
}


--------- consts:
export const DOT_WIDTH = 8;
export const DOT_HEIGHT = 6;
export const DOT_SPEED = 70 / 1000;
export const DOT_IN_SQUAD_SPACE_AROUND = 250;
export const DEFAULT_PROJECTILE = {
    radius: 4,
    speed: 1500 / 1000,
    damage: 1,
    flyDistanceLeft: 500,
};
export const BETWEEN_SQUADS_GAP = 30;
export const DOTS_GRID_SIZE = Math.max(DOT_WIDTH, DOT_HEIGHT) * 5;
export const DOT_COST_FOOD = 10;
export const DOT_COST_COINS = 10;
export const SQUAD_MIN_DOTS = 10;
export const DOT_ATTACK_RANGE = 200;
export const DOT_ATTACK_COOLDOWN = 2000;
export const DOT_AIMING_DURATION = 500;
export const DOT_HEALTH = 2;


--------- PlayerAI class usage:
const player = new PlayerAI(game, team2);

player.addEventListener("action", (message: string) =>
    console.log("action", message),
);
player.addEventListener("intention", (message: string) =>
    console.log("intention", message),
);
player.startAI();


--------- other info (important one as well):
resources explanation:
coins - to produce units and to buy buildings.
wood - to buy buildings.
food - to produce units.

coins are better to preserve. there are no good ways to produce them.
food is very important - no food = no units = you die.
wood is not so important - you can build lumber mills anytime.

farms produce food.
barracks produce units.
lumber mills produce wood.
hq produces coins. (a small amount of coins)

farms are very important - no food = no units = you die.
lumber mills are very cheap - but know your limit. try no to spend all your coins on them.

implement! in a one file.
if there is a lack of some information then ask me before producing the output.
otherwise emit only code.

make the AI act periodically (like once every 200 ms).
like do an window.setInterval (window! not just setInterval) in PlayerAI and do the stuff there.
there should be no need to work with Game tick effects (you have no access anyway).

building can be done via Game.tryBuild - it tries to build and returns true if it was successful.

enemy's squads and buildings can be anywhere - you need to find them.

log all your actions to an array of strings. an make an event of it that can be subscribed to externally.
do not use Game events system (it's private btw).
provide addEventListener and removeEventListener methods to listen to new events.
there is no external EventEmitter implementation.
also log your intentions but with an interval of 1 second.
i mean, real intentions, not just "I'm assessing the situation".
like store the last intention after a iteration and then emit it.
when you mention a squad - use its key to refer to it.

when in loop of failing the same action over and over again,
try to find a better way to do it or just don't bother doing it.
like when you can't find a place to place a building.

there can be only one HQ in the game.

there can be already placed buildings and squads for you and your opponent.

make a startAI public method that starts the AI.

when you order a squad to attack - it won't move on its own. you need to do it manually.
so order to attack just sets a shooting target for the dots in the squad.
you also better allow shooting for the squad in order for it to attack.

you can't just try to attack the enemy HQ only. you better take enemy squads in account.

you better keep your buildings close to each other. maybe start building around already placed buildings.
build around the HQ?
if there are some.

maybe you should try to develop some kind of strategy and make decisions based on it.

all teams besides yours are enemies.

try not to forget to manage your squads.
moving and attacking is important!

there can be a lot of code. it's alright. maybe you better to modularize it (but inside the same file).

add some randomness to the AI. so you don't get stuck in a loop.

do not confuse Rect and RectOrth.

barracks do have a limited throughput.
so you may have much more resources production than you spend on units.
better optimize the spending as well.

dots are slow and fragile. you can't just order a squad move inside an enemy squad.
because your dots cannot shoot while moving. and enemy's are standing still, waiting for you and shooting you.
so you better place your squads in a reach of enemy's squad to shoot them.
instead of ordering your squads to move too close.
who first stars to shoot - the one who wins a skirmish.
but dots have a range. so you can't be really far from the enemy.

when you order to attack a building - you squad won't attack enemy's squads.
so you better be close to the building and be safe before attacking.
or risk!

where order to attack a squad - the single thing that changes that your squad won't attack other squads.
so it's "focus on attacking only that squad".

you do not need to fill barracks spawning queue - it's being filled automatically.

i suggest you write something like 'canMySquadAttackEnemySquad' to figure out if your squads are able to attack enemy's squads at its positions.
it's very bad when your squad can't shoot.

your dots can't shoot through your building or your dots.
i mean, you can shoot them but then you destroy them.
so you better not to overlap them.
DOT NOT OVERLAP YOUR SQUADS.

dots atack on their own when they are in range.

place your squads towards the enemy's squads so the can better attack them.
you can adjust the direction by placing a squad's frame.
frame.p1 + frame.p2 are the front line.
so you need to face the line towards the enemy.


and maybe try creating squads with a different size - it's more interesting to watch. :)

now, write code! (or ask questions if you need help).
do not emit explanations in the final answer to the prompt. just write the code.
or ask questions if you have any.
